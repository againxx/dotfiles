[file-build:debug]
command:c=gcc -g "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -Wall -Wextra -Wpedantic
command:cpp=g++ -g "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -std=c++17 -Wall -Wextra -Wpedantic
command:typescript=tsc "$(VIM_FILENAME)"
output=quickfix
cwd=$(VIM_FILEDIR)
errorformat=%E%f:%l:%c:\ error:\ %m,%W%f:%l:%c:\ warning:\ %m,%-Z\ %\\+|\ %\\+^~,%-C%.%#
save=2

[file-build:release]
command:cpp=gcc -O3 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -std=c++17
command:typescript=tsc "$(VIM_FILENAME)"
output=quickfix
cwd=$(VIM_FILEDIR)
errorformat=%E%f:%l:%c:\ error:\ %m,%W%f:%l:%c:\ warning:\ %m,%-Z\ %\\+|\ %\\+^~,%-C%.%#
save=2

[file-build:release-debug]
command=gcc -g -O2 "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -lstdc++ -std=c++17
output=quickfix
cwd=$(VIM_FILEDIR)
errorformat=%E%f:%l:%c:\ error:\ %m,%W%f:%l:%c:\ warning:\ %m,%-Z\ %\\+|\ %\\+^~,%-C%.%#
save=2

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp=[ "$(VIM_FILENAME)" -nt "$(VIM_PATHNOEXT)" -o ! -x "$(VIM_PATHNOEXT)" ] && asynctask file-build "$(VIM_FILENAME)" ; [ "$(VIM_PATHNOEXT)" -nt "$(VIM_FILENAME)" ] && "$(VIM_PATHNOEXT)"
command:python=python3 "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILENAME)"
command:sh=bash "$(VIM_FILENAME)"
command:zsh=zsh "$(VIM_FILENAME)"
command:vim=:source %
command:typescript=node "$(VIM_FILENOEXT).js"
command:javascript=node "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
output=terminal
cwd=$(VIM_FILEDIR)
save=2

[project-init:debug]
command=mkdir -p build && cd build && rm -rf *(N) && cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .. && ln -sf build/compile_commands.json ..
cwd=<root>
errorformat=

[project-init:release]
command=mkdir -p build && cd build && rm -rf *(N) && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .. && ln -sf build/compile_commands.json ..
cwd=<root>
errorformat=

[project-init:release-debug]
command=mkdir -p build && cd build && rm -rf *(N) && cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .. && ln -sf build/compile_commands.json ..
cwd=<root>
errorformat=

[project-build:release]
command:cpp=cmake --build build
command:cmake=cmake --build build
command:typescript=tsc
command:rust=cargo build --release
cwd=<root>
errorformat=%f:%l:%m

[project-build:debug]
command:cpp=cmake --build build
command:cmake=cmake --build build
command:typescript=tsc
command:rust=cargo build
cwd=<root>
errorformat=%f:%l:%m

[project-run]
command=build/`grep -oP "add_executable\(\K\w+" CMakeLists.txt`
command:rust=cargo run --bin $(+run_target:)
cwd=<root>
output=terminal

[project-clean]
command=cd build && rm -rf *(N)
cwd=<root>
errorformat=

[catkin-init:release]
command=bash ~/dotfiles/bash_scripts/catkin_init.bash --release $(-packages:--all)
cwd=$(VIM_CWD)
output=terminal

[catkin-init:debug]
command=bash ~/dotfiles/bash_scripts/catkin_init.bash --debug $(-packages:--all)
cwd=$(VIM_CWD)
output=terminal
